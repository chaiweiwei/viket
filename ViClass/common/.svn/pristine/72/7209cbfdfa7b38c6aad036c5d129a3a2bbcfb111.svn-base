//
//  WBRequest.m
//  WeiboApi
//  Based on OAuth 2.0
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
//  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//  OTHER DEALINGS IN THE SOFTWARE.
//
//  Copyright 2011 Sina. All rights reserved.
//

#import "WBRequest.h"
#import "WBUtil.h"
#import "SBJson.h"
#import "ASIFormDataRequest.h"

#import "WBSDKGlobal.h"

#define kWBRequestTimeOutInterval   20.0
#define kWBRequestStringBoundary    @"293iosfksdfkiowjksdf31jsiuwq003s02dsaffafass3qw"

@interface WBRequest (Private)

+ (NSString *)stringFromDictionary:(NSDictionary *)dict;
+ (void)appendUTF8Body:(NSMutableData *)body dataString:(NSString *)dataString;
- (NSMutableData *)postBody;

- (void)handleResponseData:(ASIHTTPRequest *)request;
- (id)parseJSONData:(NSString *)data error:(NSError **)error;

- (id)errorWithCode:(NSInteger)code userInfo:(NSDictionary *)userInfo;
- (void)failedWithError:(NSError *)error;
@end


@implementation WBRequest
@synthesize url;
@synthesize httpMethod;
@synthesize params;
@synthesize postDataType;
@synthesize httpHeaderFields;
@synthesize delegate;


#pragma mark - WBRequest Life Circle

- (void)dealloc
{
//    NSLog(@"dealloc %@ retainCount:%d,delegate %@ retainCount:%d",self,self.retainCount,delegate,[delegate retainCount]);
    [self setDelegate:nil];
    [url release], url = nil;
    [httpMethod release], httpMethod = nil;
    [params release], params = nil;
    [httpHeaderFields release], httpHeaderFields = nil;
    
    self.connection.delegate=nil;
    [self.connection cancel];
    self.connection = nil;
    
    [super dealloc];
}

#pragma mark - WBRequest Private Methods

+ (NSString *)stringFromDictionary:(NSDictionary *)dict
{
    NSMutableArray *pairs = [NSMutableArray array];
	for (NSString *key in [dict keyEnumerator])
	{
		if (!([[dict valueForKey:key] isKindOfClass:[NSString class]]))
		{
			continue;
		}
		
		[pairs addObject:[NSString stringWithFormat:@"%@=%@", key, [[dict objectForKey:key] URLEncodedString]]];
	}
	
	return [pairs componentsJoinedByString:@"&"];
}

+ (void)appendUTF8Body:(NSMutableData *)body dataString:(NSString *)dataString
{
    [body appendData:[dataString dataUsingEncoding:NSUTF8StringEncoding]];
}

- (NSMutableData *)postBody
{
    NSMutableData *body = [NSMutableData data];
    
    if (postDataType == kWBRequestPostDataTypeNormal)
    {
        [WBRequest appendUTF8Body:body dataString:[WBRequest stringFromDictionary:params]];
    }
    else if (postDataType == kWBRequestPostDataTypeMultipart)
    {
        NSString *bodyPrefixString = [NSString stringWithFormat:@"--%@\r\n", kWBRequestStringBoundary];
		NSString *bodySuffixString = [NSString stringWithFormat:@"\r\n--%@--\r\n", kWBRequestStringBoundary];
        
        NSMutableDictionary *dataDictionary = [NSMutableDictionary dictionary];
        
        [WBRequest appendUTF8Body:body dataString:bodyPrefixString];
        
        for (id key in [params keyEnumerator]) 
		{
			id value=[params valueForKey:key];
			if (([value isKindOfClass:[UIImage class]]) || ([value isKindOfClass:[NSData class]]))
			{
				[dataDictionary setObject:value forKey:key];
				continue;
			}
			
			[WBRequest appendUTF8Body:body dataString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n%@\r\n", key, [params valueForKey:key]]];
			[WBRequest appendUTF8Body:body dataString:bodyPrefixString];
		}
		
		if ([dataDictionary count] > 0) 
		{
			for (id key in dataDictionary) 
			{
				NSObject *dataParam = [dataDictionary valueForKey:key];
				
				if ([dataParam isKindOfClass:[UIImage class]]) 
				{
					NSData* imageData = UIImagePNGRepresentation((UIImage *)dataParam);
					[WBRequest appendUTF8Body:body dataString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"; filename=\"file.png\"\r\n", key]];
					[WBRequest appendUTF8Body:body dataString:@"Content-Type: image/png\r\nContent-Transfer-Encoding: binary\r\n\r\n"];
					[body appendData:imageData];
				} 
				else if ([dataParam isKindOfClass:[NSData class]]) 
				{
					[WBRequest appendUTF8Body:body dataString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n", key]];
					[WBRequest appendUTF8Body:body dataString:@"Content-Type: content/unknown\r\nContent-Transfer-Encoding: binary\r\n\r\n"];
					[body appendData:(NSData*)dataParam];
				}
				[WBRequest appendUTF8Body:body dataString:bodySuffixString];
			}
		}
    }
    
    return body;
}

- (void)handleResponseData:(ASIHTTPRequest *)request 
{
    NSData *data=request.responseData;
    if ([delegate respondsToSelector:@selector(request:didReceiveRawData:)])
    {
        [delegate request:self didReceiveRawData:data];
    }
    //NSLog(@"result string:%@",request.responseString);
	
	NSError* error = nil;
	id result = [self parseJSONData:request.responseString error:&error];
    if (error) {
        //NSLog(@"parseJSONData error:%@",error);
    }
	self.connection=nil;
	if ([delegate respondsToSelector:@selector(request:didFinishLoadingWithResult:)])
    {
        [delegate request:self didFinishLoadingWithResult:(result == nil ? data : result)];
    }
}

- (id)parseJSONData:(NSString *)dataString error:(NSError **)error
{
	//SBJSON *jsonParser = [[SBJSON alloc]init];
    SBJsonParser *jsonParser =[[SBJsonParser alloc] init];
    id result=[jsonParser objectWithString:dataString];
	[jsonParser release];
	
	if ([result isKindOfClass:[NSDictionary class]])
	{
        id code=[result objectForKey:@"error_code"];
		if (code != nil && [code intValue] != 200)
		{
			if (error != nil) 
			{
                
				*error = [self errorWithCode:kWBErrorCodeInterface userInfo:result];
			}
		}else if ((code=[result objectForKey:@"ret"])!=nil && [code intValue]!=0) {
            if (error != nil) 
			{
				*error = [self errorWithCode:kWBErrorCodeInterface userInfo:result];
			}
        }
	}
	
	return result;
}

- (id)errorWithCode:(NSInteger)code userInfo:(NSDictionary *)userInfo
{
    return [NSError errorWithDomain:kWBSDKErrorDomain code:code userInfo:userInfo];
}

- (void)failedWithError:(NSError *)error 
{
	if ([delegate respondsToSelector:@selector(request:didFailWithError:)]) 
	{
		[delegate request:self didFailWithError:error];
	}
}

#pragma mark - WBRequest Public Methods

+ (WBRequest *)requestWithURL:(NSString *)url 
                   httpMethod:(NSString *)httpMethod 
                       params:(NSDictionary *)params
                 postDataType:(WBRequestPostDataType)postDataType
             httpHeaderFields:(NSDictionary *)httpHeaderFields
                     delegate:(id<WBRequestDelegate>)delegate
{
    WBRequest *request = [[WBRequest alloc] init];
    request.url = url;
    request.httpMethod = httpMethod;
    request.params = params;
    request.postDataType = postDataType;
    request.httpHeaderFields = httpHeaderFields;
    request.delegate = delegate;
    return [request autorelease];
}

+ (WBRequest *)requestWithAccessToken:(NSString *)accessToken
                                  url:(NSString *)url
                           httpMethod:(NSString *)httpMethod 
                               params:(NSDictionary *)params
                         postDataType:(WBRequestPostDataType)postDataType
                     httpHeaderFields:(NSDictionary *)httpHeaderFields
                             delegate:(id<WBRequestDelegate>)delegate
{
    // add the access token field
    NSMutableDictionary *mutableParams = [NSMutableDictionary dictionaryWithDictionary:params];
    [mutableParams setObject:accessToken forKey:@"access_token"];
    return [WBRequest requestWithURL:url
                          httpMethod:httpMethod
                              params:mutableParams
                        postDataType:postDataType 
                    httpHeaderFields:httpHeaderFields
                            delegate:delegate];
}

+ (NSString *)serializeURL:(NSString *)baseURL params:(NSDictionary *)params httpMethod:(NSString *)httpMethod
{
    if (![httpMethod isEqualToString:@"GET"])
    {
        return baseURL;
    }
    
    NSURL *parsedURL = [NSURL URLWithString:baseURL];
	NSString *queryPrefix = parsedURL.query ? @"&" : @"?";
	NSString *query = [WBRequest stringFromDictionary:params];
	
	return [NSString stringWithFormat:@"%@%@%@", baseURL, queryPrefix, query];
}

-(void) initHttpRequest:(ASIHTTPRequest *) request{
    //[request setShouldAttemptPersistentConnection:NO]; //设置是否重用链接
    [request setTimeOutSeconds:kWBRequestTimeOutInterval]; //设置超时时间，单位秒
    [request setNumberOfTimesToRetryOnTimeout:0]; //设置请求超时时，设置重试的次数
    [request setDelegate:self];
    [request setShouldContinueWhenAppEntersBackground:YES];  //当应用后台运行时仍然请求数据  
    [request setCachePolicy:ASIDoNotReadFromCacheCachePolicy]; //设置不使用缓存
}

- (void)connect
{
    NSString *urlString = [WBRequest serializeURL:url params:params httpMethod:httpMethod];
    
    if (_connection) {
        [_connection cancel];
        _connection.delegate=nil;
        self.connection = nil;
    }
    ASIHTTPRequest *request = nil;
    if ([httpMethod isEqualToString:@"POST"] && [params isKindOfClass:[NSDictionary class]] && params.count>0 &&postDataType != kWBRequestPostDataTypeMultipart){
        request=[ASIFormDataRequest requestWithURL:[NSURL URLWithString:urlString]];
    }else {
        request = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:urlString]];
    }
    [self initHttpRequest:request];
    self.connection=request;
    
    if ([httpMethod isEqualToString:@"POST"])
    {
        if (postDataType == kWBRequestPostDataTypeMultipart)
        {
            NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", kWBRequestStringBoundary];
            [request addRequestHeader:@"Content-Type" value:contentType];
        }
        
        //NSLog(@"params:%@",params);

        if ([request isKindOfClass:[ASIFormDataRequest class]]) {
            ASIFormDataRequest *formRequest=(ASIFormDataRequest*)request;
            NSEnumerator* keys=[params keyEnumerator];
            for (NSString *key in keys) {
                [formRequest addPostValue:[params objectForKey:key] forKey:key];
            }
        }else {
            [request appendPostData:[self postBody]];
        }
    }
    
    for (NSString *key in [httpHeaderFields keyEnumerator])
    {
        [request addRequestHeader:key value:[httpHeaderFields objectForKey:key]];
    }
    //NSLog(@"request url:%@",request.url.absoluteString);
    [request startAsynchronous];
}

- (void)disconnect
{
    [_connection cancel];
    _connection.delegate=nil;
    self.connection = nil;
}

#pragma mark -ASIHTTPRequest Delegate Methods
- (void)requestStarted:(ASIHTTPRequest *)request{
    
}
- (void)request:(ASIHTTPRequest *)request didReceiveResponseHeaders:(NSDictionary *)responseHeaders{
	if ([delegate respondsToSelector:@selector(request:didReceiveResponse:)])
    {
        NSData *data=request.responseData;
        NSInteger len=0;
        if (data && [data isKindOfClass:[NSData class]]) {
            len=[data length];
        }
        NSURLResponse *newResponse =[[NSURLResponse alloc] initWithURL:request.url MIMEType:@"Text/plain"
                                                 expectedContentLength:len textEncodingName:[NSString localizedNameOfStringEncoding:request.responseEncoding]];
		[delegate request:self didReceiveResponse:newResponse];
        [newResponse release];
	}
}

- (void)requestFinished:(ASIHTTPRequest *)request{
    [self handleResponseData:request];
}

- (void)requestFailed:(ASIHTTPRequest *)request{
    [self failedWithError:request.error];
}

//- (void)request:(ASIHTTPRequest *)request didReceiveData:(NSData *)data{
//    [responseData appendData:data];
//}

@end
