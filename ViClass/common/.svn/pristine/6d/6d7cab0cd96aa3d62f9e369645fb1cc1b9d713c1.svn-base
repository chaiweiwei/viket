//
//  BaseViewController.m
//  GHSidebarNav
//
//  Created by yulong chen on 12-12-20.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "BaseViewController.h"
#import "GlobalValues.h"
#import "UIBarButtonItem+ALDBackBarButtonItem.h"

@interface BaseViewController ()
@property (retain,nonatomic) NSMutableArray *subViewControllers;
@end

@implementation BaseViewController
@synthesize isRoot=_isRoot;
@synthesize parentController=_parentController;
@synthesize subViewControllers=_subViewControllers;

- (id)init
{
    self = [super init];
    if (self) {
        
    }
    return self;
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        
    }
    return self;
}

-(void) viewDidLoad{
    [super viewDidLoad];
    self.view.backgroundColor=[UIColor clearColor];
    
    if (_isRoot) { //增加左侧菜单按钮
        UIButton *but1=[UIButton buttonWithType:UIButtonTypeCustom];
        but1.frame=CGRectMake(5, 0, 48, 30);
        [but1 setBackgroundImage:[UIImage imageNamed:@"bt_menu.png"] forState:UIControlStateNormal];
//        [but1 setBackgroundImage:[UIImage imageNamed:@"bt_menu.png"] forState:UIControlStateHighlighted];
        [but1 addTarget:self action:@selector(revealSidebar) forControlEvents:UIControlEventTouchUpInside];
        UIBarButtonItem *leftBtn=[[UIBarButtonItem alloc]initWithCustomView:but1];
        [but1 release];
        self.navigationItem.leftBarButtonItem=leftBtn;
        [leftBtn release];
//        UIButton *but1=[self createNavButton:CGRectMake(5, 0, 50, 30) tag:101];
//        [but1 setTitle:@"首页" forState:UIControlStateNormal];
////        [but1 setBackgroundImage:[UIImage imageNamed:@"bt_menu.png"] forState:UIControlStateNormal];
//        [but1 addTarget:self action:@selector(revealSidebar) forControlEvents:UIControlEventTouchUpInside];
//        UIBarButtonItem *leftBtn=[[UIBarButtonItem alloc]initWithCustomView:but1];
//        self.navigationItem.leftBarButtonItem=leftBtn;
//        [leftBtn release];
    }
    self.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
    
    BOOL isIos7=isIOS7;
    if (self.navigationController && !isIos7 && [self.navigationController viewControllers].count>1) {
        UIBarButtonItem *leftBtn=[[UIBarButtonItem alloc] initBackButtonWithTitle:ALDLocalizedString(@"Back", @"返回") color:kNavigationBarTextColor target:self action:@selector(onBackClicked)];
        self.navigationItem.leftBarButtonItem=leftBtn;
        ALDRelease(leftBtn);
    }
    if (isIos7) {
        self.extendedLayoutIncludesOpaqueBars = NO;
        self.modalPresentationCapturesStatusBarAppearance =NO;
        self.edgesForExtendedLayout = UIRectEdgeNone;
    }
}

-(void) onBackClicked{
    [self.navigationController popViewControllerAnimated:YES];
}

-(void) addBackButton{
//    UIButton *backBt=[[UIButton alloc]initWithFrame:CGRectMake(0, 0, 48, 45)];
//    [backBt setBackgroundImage:[UIImage imageNamed:@"btn_back_unsel.png"] forState:UIControlStateNormal];
//    [backBt setBackgroundImage:[UIImage imageNamed:@"btn_back_sel.png"] forState:UIControlStateHighlighted];
//    [backBt addTarget:self action:@selector(onBackClicked) forControlEvents:UIControlEventTouchUpInside];
//    UIBarButtonItem *leftitem=[[UIBarButtonItem alloc]initWithCustomView:backBt];
//    self.navigationItem.leftBarButtonItem=leftitem;
//    [backBt release];
//    [leftitem release];
    UIBarButtonItem *leftBtn=[[UIBarButtonItem alloc] initBackButtonWithTitle:ALDLocalizedString(@"Back", @"返回") color:kNavigationBarTextColor target:self action:@selector(onBackClicked)];
    self.navigationItem.leftBarButtonItem=leftBtn;
    ALDRelease(leftBtn);
}

//通知显示侧拉导航
- (void)revealSidebar {
    [[NSNotificationCenter defaultCenter] postNotificationName:@"showSideBar" object:nil];
}

#pragma mark - UIViewController
////////////////////////////////////////////////////////////////////////

- (void)viewDidUnload {
    [self removeFromParentViewController];
    [super viewDidUnload];
}

- (void)dealloc
{
    [_subViewControllers release];
    [super dealloc];
}

-(void) didReceiveMemoryWarning{
    [[NSNotificationCenter defaultCenter] postNotificationName:kDidReceiveMemoryWarningNotification object:nil];
    NSLog(@"%@ didReceiveMemoryWarning",self);
    [super didReceiveMemoryWarning];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    if (!self.containmentAPISupported) {
        if (_subViewControllers) {
            for (UIViewController *childViewController in _subViewControllers) {
                [childViewController viewWillAppear:animated];
            }
        }
    }
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    
    if (!self.containmentAPISupported) {
        if (_subViewControllers) {
            for (UIViewController *childViewController in _subViewControllers) {
                [childViewController viewDidAppear:animated];
            }
        }
    }
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    
    if (!self.containmentAPISupported) {
        if (_subViewControllers) {
            for (UIViewController *childViewController in _subViewControllers) {
                [childViewController viewWillDisappear:animated];
            }
        }
    }
}

- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    
    if (!self.containmentAPISupported) {
        if (_subViewControllers) {
            for (UIViewController *childViewController in _subViewControllers) {
                [childViewController viewDidDisappear:animated];
            }
        }
    }
}

- (BOOL)containmentAPISupported {
    // containment API is supported on iOS 5 and up
    return kSystemVersion>=5.0?YES:NO;
}

#pragma mark IOS5.0 after methods
//Notifies the view controller that its view is about to layout its subviews.
-(void) viewWillLayoutSubviews{
    if ([self containmentAPISupported]){
        [super viewWillLayoutSubviews];
    }else {
        
    }
}

//Notifies the view controller that its view just laid out its subviews.
-(void) viewDidLayoutSubviews{
    if ([self containmentAPISupported]){
        [super viewDidLayoutSubviews];
    }else {
        
    }
}

//Called just before releasing the controller’s view from memory.
-(void) viewWillUnload{
    if ([self containmentAPISupported]) {
        [super viewWillUnload];
    }else {
        
    }
}

/*
 The next two methods are replacements for presentModalViewController:animated and
 dismissModalViewControllerAnimated: The completion handler, if provided, will be invoked after the presented
 controllers viewDidAppear: callback is invoked.
 */
-(void) presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)flag completion:(void (^)(void))completion{
    if ([self containmentAPISupported]) {
        [super presentViewController:viewControllerToPresent animated:flag completion:completion];
    }else {
        
    }
}

// The completion handler, if provided, will be invoked after the dismissed controller's viewDidDisappear: callback is invoked.
-(void) dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion{
    if ([self containmentAPISupported]) {
        [super dismissViewControllerAnimated:flag completion:completion];
    }else {
        
    }
}

-(void) willAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration{
    if ([self containmentAPISupported]) {
        [super willAnimateFirstHalfOfRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];
    }else {
        
    }
}

-(void) willAnimateSecondHalfOfRotationFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration{
    if ([self containmentAPISupported]){
        [super willAnimateSecondHalfOfRotationFromInterfaceOrientation:fromInterfaceOrientation duration:duration];
    }else {
        
    }
}

// An array of children view controllers. This array does not include any presented view controllers.
-(NSArray*) childViewControllers{
    if ([self containmentAPISupported]){
        return [super childViewControllers];
    }else {
        return nil;
    }
}

/*
 If the child controller has a different parent controller, it will first be removed from its current parent
 by calling removeFromParentViewController. If this method is overridden then the super implementation must
 be called.
 */
-(void) addChildViewController:(UIViewController *)childController{
    if (!childController) {
        return;
    }
    if ([self containmentAPISupported]){
        [super addChildViewController:childController];
    }else {
//        [childController.view removeFromSuperview];
        if (!_subViewControllers) {
            self.subViewControllers=[NSMutableArray array];
        }
        if (![_subViewControllers containsObject:childController]) {
            [_subViewControllers addObject:childController];
        }
    }
}

//移除子视图
-(void) removeChildController:(UIViewController*)childViewController{
//    NSLog(@"removeChildController %@",childViewController);
    if (childViewController) {
        if ([self containmentAPISupported]) {
            [childViewController removeFromParentViewController];
        }else {
            [_subViewControllers removeObject:childViewController];
//            [childViewController.view removeFromSuperview];
        }
    }
}

//Removes the receiver from its parent in the view controller hierarchy.
-(void) removeFromParentViewController{
    self.parentController=nil;
    if ([self containmentAPISupported]) {
        [super removeFromParentViewController];
    }else {
        [self.view removeFromSuperview];
    }
}

//Transitions between two of the view controller’s child view controllers.
-(void) transitionFromViewController:(UIViewController *)fromViewController toViewController:(UIViewController *)toViewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL))completion{
//    NSLog(@"fromViewController:%@,toViewController:%@",fromViewController,toViewController);
    if ([self containmentAPISupported]) {
        [super transitionFromViewController:fromViewController toViewController:toViewController duration:duration options:options animations:animations completion:completion];
    }else {
        UIView *parentView=fromViewController.view.superview;
//        [fromViewController.view removeFromSuperview];
        [parentView addSubview:toViewController.view];
        [UIView transitionFromView:fromViewController.view toView:toViewController.view duration:0.5 options:options completion:completion];
    }
}

//Called just before the view controller is added or removed from a container view controller.
-(void) willMoveToParentViewController:(UIViewController *)parent{
    if ([self containmentAPISupported]) {
        [super willMoveToParentViewController:parent];
    }else {
        
    }
}

//Called after the view controller is added or removed from a container view controller.
-(void) didMoveToParentViewController:(UIViewController *)parent{
    self.parentController=parent;
    if ([self containmentAPISupported]) {
        [super didMoveToParentViewController:parent];
    }else {
        
    }
}

-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath{
    cell.backgroundColor=[UIColor clearColor];
}

+(void) attemptRotationToDeviceOrientation{
    if (kSystemVersion>=5.0) {
        [super attemptRotationToDeviceOrientation];
    }else {
        
    }
}

/**
 * 给键盘添加关闭按钮
 * @param inputView 需要添加的输入框
 **/
-(void) setInputAccessoryView:(id) inputView{
    if ([inputView respondsToSelector:@selector(setInputAccessoryView:)]) {
        UIToolbar * topView = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 30)];
        [topView setBarStyle:UIBarStyleBlackTranslucent];
        
        UIBarButtonItem * btnSpace = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
        
        UIBarButtonItem * doneButton = [[UIBarButtonItem alloc]initWithTitle:ALDLocalizedString(@"hidenKeyBord",@"关闭键盘") style:UIBarButtonItemStyleBordered target:self action:@selector(dismissKeyBoard)];
        
        
        NSArray * buttonsArray = [NSArray arrayWithObjects:btnSpace,doneButton,nil];
        [doneButton release];
        [btnSpace release];
        
        [topView setItems:buttonsArray];
        [inputView setInputAccessoryView:topView];
        [topView release];
    }
}

//需要重写的方法
-(void) dismissKeyBoard{
    
}

//-(UIButton*) createNavButton:(CGRect) frame title:(NSString*)title tag:(int) tag{
//    UIButton *button=[UIButton buttonWithType:UIButtonTypeCustom];
//    button.frame=frame;
//    button.titleLabel.font=KNavButtonFontSize;
//    [button setTitle:title forState:UIControlStateNormal];
//    [button setBackgroundImage:[UIImage imageNamed:@"btn_navItem_right"] forState:UIControlStateNormal];
//    //    [button setBackgroundImage:[UIImage imageNamed:@"bt2_top"] forState:UIControlStateHighlighted];
//    button.tag=tag;
//    return button;
//}
@end
