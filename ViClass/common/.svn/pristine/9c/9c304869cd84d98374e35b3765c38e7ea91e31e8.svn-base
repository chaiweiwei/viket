//
//  WBWyEngine.m
//  WeiboApi
//  网易微博引擎
//  Created by yulong chen on 12-10-31.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "WBWyEngine.h"

#define kErrorDomain @"WBWyEngine"

@implementation WBWyEngine
-(id) init{
    if (self=[super init]) {
        self.keychainPrefix=@"Wy";
        self.weiboType=TypeWyWeibo;
    }
    return self;
}

//- (id)initWithAppKey:(NSString *)theAppKey appSecret:(NSString *)theAppSecret
//{
//    if (self = [self init])
//    {
//        self.appKey = theAppKey;
//        self.appSecret = theAppSecret;
//        
//        [self readAuthorizeDataFromKeychain];
//    }
//    
//    return self;
//}

/**
 * 获取用户微博
 * @param uid	需要查询的用户ID。
 * @param nick 微博昵称，uid和nick参数必须二选一
 * @param maxId 可选参数	 该参数需传cursor_id,返回此条索引之后发的微博列表，包含此条
 * @param sinceId  可选参数,该参数需传cursor_id,返回此条索引之前发的微博列表，不包含此条。
 * @param pagecount 可选参数	 数量，默认为30条，最大为200条请求示例
 * @param trimUser 返回值中user信息开关，值为true时返回的user对象只包含id属性，该属性能在一定程度上减少返回的数据量
 **/
-(void) readUserTimeline:(NSString *)uid nick:(NSString*)nick maxId:(NSString *)maxId sinceId:(NSString*)sinceId pagecount:(int)pagecount trimUser:(BOOL)trimUser{
    self.requestPath=WeiboRequestPathForOther;
    NSMutableDictionary *params=[NSMutableDictionary dictionary];
    //NSLog(@"uid:%@ , nick:%@",uid,nick);
    if (uid && ![uid isEqualToString:@""]) {
        [params setObject:uid forKey:@"user_id"]; //或screen_name
    }else if (nick && ![nick isEqualToString:@""]) {
        [params setObject:nick forKey:@"name"];
    }else {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,用户id或昵称不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    } 
    
    if (maxId) {
        [params setObject:maxId forKey:@"max_id"];
    }
    if (sinceId) {
        [params setObject:sinceId forKey:@"since_id"];
    }

    if (pagecount<1) pagecount=20;
    [params setObject:[NSNumber numberWithInt:pagecount] forKey:@"count"];
    //可选参数,需要返回微博的过滤类型，取值范围0-7，分别代表全部、原创、图片、视频、音乐、跟帖、新闻、话题，默认为0全部，如果输入超出取值范围则返回全部。
    [params setObject:[NSNumber numberWithInt:0] forKey:@"filter_type"];
    [params setObject:[NSNumber numberWithBool:trimUser] forKey:@"trim_user"];
    
    [self loadRequestWithMethodName:@"statuses/user_timeline.json"
                         httpMethod:@"GET"
                             params:params
                       postDataType:kWBRequestPostDataTypeNone
                   httpHeaderFields:nil];
}

/**
 * 查看用户信息
 * @param wuid 微博用户id，如果都不传，则返回当前用户信息；
 */
-(void) showUser:(NSString *) wuid{
    [self showUser:wuid screenName:nil];
}

/**
 * 查看用户信息
 * @param wuid 微博用户id，如果都不传，则返回当前用户信息；
 * @param screenName 用户昵称
 */
-(void) showUser:(NSString *) wuid screenName:(NSString*)nick{
    self.requestPath=WeiboRequestPathForShowUser;
    NSMutableDictionary *params=nil;
    if (wuid && ![wuid isEqualToString:@""]) {
        params=[NSMutableDictionary dictionary];
        [params setObject:wuid forKey:@"id"];
    }
    if (nick && ![nick isEqualToString:@""]) {
        if (!params) {
            params=[NSMutableDictionary dictionary];
        }
        [params setObject:nick forKey:@"name"];
    }
    
    [self loadRequestWithMethodName:@"users/show.json"
                         httpMethod:@"GET"
                             params:params
                       postDataType:kWBRequestPostDataTypeNone
                   httpHeaderFields:nil];
}

/**
 * 发送微博
 * @param text 微博文本内容
 * @param image 带图片的微博,可空
 * @param lat 纬度
 * @param lng 经度
 **/
- (void)sendWeiBoWithText:(NSString *)text image:(UIImage *)image lat:(NSString*)lat lng:(NSString*)lng
{
    self.requestPath=WeiboRequestPathForFasong;
    if ((!text || [text isEqualToString:@""]) &&!image) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,微博内容不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    
    NSMutableDictionary *params = [NSMutableDictionary dictionaryWithCapacity:2];
    //NSString *sendText = [text URLEncodedString];
	[params setObject:(text ? text : @"") forKey:@"status"];
    if (lat && ![lat isEqualToString:@""]) {
        [params setObject:lat forKey:@"lat"];
    }
    if (lng && ![lng isEqualToString:@""]) {
        [params setObject:lng forKey:@"long"];
    }
    if (image)
    {
		[params setObject:image forKey:@"pic"];
        [self loadRequestWithMethodName:@"statuses/upload.json"
                             httpMethod:@"POST"
                                 params:params
                           postDataType:kWBRequestPostDataTypeMultipart
                       httpHeaderFields:nil];
    }else {
        [self loadRequestWithMethodName:@"statuses/update.json"
                             httpMethod:@"POST"
                                 params:params
                           postDataType:kWBRequestPostDataTypeNormal
                       httpHeaderFields:nil];
    }
}

/**
 * 转发微博
 * @param text 内容
 * @param 转发微博的id
 */
- (void)repostWeiboWithText:(NSString *) text weibId:(NSString *)weiboId{
    self.requestPath=WeiboRequestPathForZhuanfa;
    if (!weiboId || [weiboId isEqualToString:@""]) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,转发微博id不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    
    NSString *uri=[NSString stringWithFormat:@"statuses/retweet/%@.json",weiboId];
    NSMutableDictionary *params=[NSMutableDictionary dictionary];
    //[params setObject:weiboId forKey:@"id"];
    [params setObject:(text ? text : @"") forKey:@"status"];
    [params setObject:[NSNumber numberWithInt:0] forKey:@"is_comment"]; //是否评论 默认不评论 1为评论
    [params setObject:[NSNumber numberWithInt:0] forKey:@"is_comment_to_root"]; //是否评论给原微博 默认不评论 1为评论。
    [self loadRequestWithMethodName:uri
                         httpMethod:@"POST"
                             params:params
                       postDataType:kWBRequestPostDataTypeNormal
                   httpHeaderFields:nil];
}

/**
 * 评论微博
 * @param text 内容
 * @param 待评论微博的id
 */
-(void) commentsWeiboWithText:(NSString *)text weiboId:(NSString *)weiboId{
    self.requestPath=WeiboRequestPathForPinglun;
    if (!weiboId || [weiboId isEqualToString:@""]) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,评论微博id不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    if (!text || [text isEqualToString:@""]) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,评论内容不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    
    NSMutableDictionary *params=[NSMutableDictionary dictionary];
    [params setObject:weiboId forKey:@"id"];
    [params setObject:text forKey:@"status"];
    //[params setObject:[NSNumber numberWithInt:1] forKey:@"is_retweet"];//是否转发 默认不转发 1为转发
    //[params setObject:[NSNumber numberWithInt:1] forKey:@"is_comment_to_root"]; //是否评论给原微博 默认不评论 1为评论
    //[params setObject:[NSNumber numberWithInt:1] forKey:@"is_retweet_append_context"];//评论并转发时转发是否带原文 默认不带原文 1或true为带
    [self loadRequestWithMethodName:@"statuses/reply.json"
                         httpMethod:@"POST"
                             params:params
                       postDataType:kWBRequestPostDataTypeNormal
                   httpHeaderFields:nil];
}

/**
 * 关注某用户
 * @param uid 待关注的微博用户id uid与screenName必须二选一
 * @param screenName 该用户的个性网址，也可以传user_id
 **/
-(void) friendshipsCreate:(NSString *) uid screenName:(NSString*) nick{
    self.requestPath=WeiboRequestPathForCreateFreinds;
    if ((!uid || [uid isEqualToString:@""]) && (!nick || [nick isEqualToString:@""])) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,待关注用户不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    NSMutableDictionary *params=[NSMutableDictionary dictionary];
    if (uid && ![uid isEqualToString:@""]) {
        [params setObject:uid forKey:@"user_id"];
    }else {
        [params setObject:nick forKey:@"screen_name"];
    }
    [self loadRequestWithMethodName:@"friendships/create.json"
                         httpMethod:@"POST"
                             params:params
                       postDataType:kWBRequestPostDataTypeNormal
                   httpHeaderFields:nil];
}

/**
 * 取消关注某用户
 * @param uid 待取消关注的微博用户id uid与screenName必须二选一
 * @param screenName 该用户的个性网址，也可以传user_id
 **/
-(void) friendshipsDestroy:(NSString *) uid screenName:(NSString *)nick{
    self.requestPath=WeiboRequestPathForDestroyFreinds;
    if ((!uid || [uid isEqualToString:@""]) && (!nick || [nick isEqualToString:@""])) {
        if ([delegate respondsToSelector:@selector(engine:requestDidFailWithError:)])
        {
            NSMutableDictionary *userInfo=[NSMutableDictionary dictionary];
            [userInfo setObject:[NSNumber numberWithInt:kREQUEST_PARAM_ERROR] forKey:@"error_code"];
            [userInfo setObject:@"参数错误,取消关注用户不能为空" forKey:@"msg"];
            NSError *error=[NSError errorWithDomain:kErrorDomain code:kREQUEST_PARAM_ERROR userInfo:userInfo];
            [delegate engine:self requestDidFailWithError:error];
        }
        return;
    }
    NSMutableDictionary *params=[NSMutableDictionary dictionary];
    if (uid && ![uid isEqualToString:@""]) {
        [params setObject:uid forKey:@"user_id"];
    }else {
        [params setObject:nick forKey:@"screen_name"];
    }
    [self loadRequestWithMethodName:@"friendships/destroy.json"
                         httpMethod:@"POST"
                             params:params
                       postDataType:kWBRequestPostDataTypeNormal
                   httpHeaderFields:nil];
}
@end
